import { expect } from "chai";
import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { protocolFixture } from "../integration";
//import { ethers, } from "hardhat";

describe("xrETH Mint Fee", async function () {
    it("Assess the same fee when using deposit() and mint()", async function () {
        const setupData = await loadFixture(protocolFixture);
        const { protocol, signers } = setupData;

        // set share value to something random
        await protocol.operatorDistributor.connect(signers.random).call({value: ethers.utils.parseEther("1")});

        // Deposit 1 ETH using deposit()
        expect(await protocol.vCWETH.connect(signers.random).deposit(ethers.utils.parseEther("1"), signers.random.address)).to.not.be.reverted;
        const sharesWithDeposit = await ethers.provider.getBalance(protocol.vCWETH.address);

        // redeem the shares again to reset xrETH balance
        expect(await protocol.vCWETH.connect(signers.random).redeem(sharesWithDeposit, signers.random.address)).to.not.be.reverted;
        expect(await ethers.provider.getBalance(protocol.vCWETH.address)).to.equal(0);

        // Mint 1 ETH using mint()
        expect(await protocol.vCWETH.connect(signers.random).mint(ethers.utils.parseEther("1"), signers.random.address)).to.not.be.reverted;
        const sharesWithMint = await ethers.provider.getBalance(protocol.vCWETH.address);

        expect(sharesWithDeposit)

    })
})